#!perl

# DATE
# VERSION

use 5.010;
use strict;
use warnings;
use Log::ger; BEGIN { $ENV{LOG_LEVEL} //= 'info' }

use PERLANCAR::Module::List;
use Perinci::CmdLine::Any;

my $prefix = '/App/lcpan/';
my $mods = do {
    # if we are being called during the building of our own dist by dzil (e.g.
    # by Pod::Weaver::Plugin::Rinci), don't include subcommands installed
    # outside our dist. otherwise we'll be documenting and depending on
    # extraneous subcommands.
    local @INC = ("lib")
        if $ENV{DZIL} &&
            # DZP:SetEnv always sets DZIL=1 so we need to know if it's our own
            # dist that we're building
            (!defined($ENV{DZIL_NAME}) || $ENV{DZIL_NAME} eq 'App-lcpan');

    PERLANCAR::Module::List::list_modules(
        "App::lcpan::Cmd::", {list_modules=>1});
};
my $subcommands = {};
for my $mod (keys %$mods) {
    (my $sc_name = $mod) =~ s/App::lcpan::Cmd:://;
    $sc_name =~ s/_/-/g;

    # old subcommands
    next if $sc_name =~ /\A(update-files|update-index)\z/;

    (my $url = $mod) =~ s!::!/!g;
    $subcommands->{$sc_name} = {
        url => "/$url/handle_cmd",
    };
}

my $cli = Perinci::CmdLine::Any->new(
    url => $prefix,
    log => 1,
    subcommands => $subcommands,
);
$cli->common_opts->{naked_res}{default} = 1;
$cli->run;

# ABSTRACT: Manage your local CPAN mirror
# PODNAME:

=head1 SYNOPSIS

=head2 Creating/updating your local CPAN mirror

The first step to use C<lcpan> is to create/update your local CPAN mirror. You
can install the bootstrap database first to avoid doing indexing from scratch:

 % cpanm -n App::lcpan::Bootstrap

Then run:

 % lcpan update --trace

A mini CPAN mirror will be downloaded/updated in your C<~/cpan> directory. This
will take a while, e.g. a couple of hours, depending on your Internet connection
speed (as of 2018-09-08 the size of a mini CPAN mirror is ~10GB). Subsequent
updates will of course take significantly shorter time.

After download, a SQLite database will also be created/updated at
C<~/cpan/index.db> which will contain information about authors,
modules/packages, distributions. This database will be used to answer queries
you might issue later. During this "indexing" process, release files will be
extracted to temporary directory and the source codes will be scanned. This
process will again take a while for the first time, e.g. under an hour (if you
are using a fairly recent bootstrap database) or a few hours (if you are
indexing from scratch). Subsequent updates will be much faster.

You can run the above "update" command e.g. daily to keep your mirror
up-to-date. Omit the C<--trace> option to see less debugging messages.

=head2 Using your local CPAN mirror to install modules

 % lcpanm -n Some::Module

C<lcpanm> is a thin wrapper for C<cpanm>. The above command is equivalent to:

 % cpanm --mirror ~/cpan --mirror-only -n Some::Module

=head2 Querying your local CPAN mirror

Info about your local CPAN mirror:

 % lcpan stats
 +------------------------------+----------------------+
 | key                          | value                |
 | last_index_time              | 2015-01-15T13:09:25Z |
 | mirror_mtime                 | 2015-01-15T13:09:22Z |
 | num_authors                  | 11981                |
 | num_dists                    | 30376                |
 | num_modules                  | 151927               |
 | num_releases                 | 31877                |
 | num_releases_with_buildpl    | 6521                 |
 | num_releases_with_makefilepl | 28948                |
 | num_releases_with_metajson   | 10625                |
 | num_releases_with_metayml    | 10689                |
 | schema_version               | 3                    |
 +------------------------------+----------------------+

Add C<--verbose> if you want more stats which normally are skipped because they
can take a while to get (e.g. disk-space).

B<Listing modules:>

 % lcpan modules                                ;# list all mods
 % lcpan mods <SOMEQUERY>... --detail           ;# show matching mods only (mods is alias for 'modules')
 % lcpan mods Win32                             ;# list mods containing 'Win32' in their name/abstract
 % lcpan mods Win32 API                         ;# list mods containing 'Win32' and 'API' in their name/abstract
 % lcpan mods Win32 API --or                    ;# list mods containing 'Win32' *or* 'API' in their name/abstract
 % lcpan mods 'Win32%'                          ;# perform SQL LIKE query (mods whose name/abstract begins with 'Win32')
 % lcpan mods --or --query-type exact-name Module1 Module2 --detail  ;# show detail for several mods
 % lcpan mods --author PERLANCAR                ;# mods by some author only
 % lcpan mods --dist libwww-perl                ;# mods from certain dist only
 % lcpan mods --namespace Getopt                ;# mods from certain namespace
 % lcpan mods --namespace Getopt --sort -rdeps  ;# list "popular" modules first (sort by number of reverse deps)

B<Listing namespaces:>

 % lcpan namespaces                             ;# list all namespaces
 % lcpan namespaces <SOMEQUERY>... --detail     ;# show matching namespaces only
 % lcpan namespaces --or --exact-match Win32 MacOSX --detail  ;# show detail for several namespaces
 % lcpan namespaces -l1 --detail --sort -num_modules ;# list top-level namespaces sorted by number of packages

B<Listing distributions:>

 % lcpan dists                                  ;# list all dists
 % lcpan dists --latest                         ;# list all latest dists
 % lcpan dists <SOMEQUERY>... --detail          ;# show matching dists only
 % lcpan dists --or --exact-match Dist1 Dist2 --detail  ;# show detail for several dists
 % lcpan dists --author PERLANCAR               ;# dists from certain author only

B<Listing authors:>

 % lcpan authors                                ;# list all authors
 % lcpan authors <SOMEQUERY>... --detail        ;# list matching authors only
 % lcpan authors --or --exact-match PERLANCAR KENTNL --detail  ;# show detail for several authors

B<Listing releases (tarballs):>

 % lcpan releases                               ;# list all releases
 % lcpan rels <SOMEQUERY>... --detail           ;# rels is alias for 'releases'
 % lcpan rels --or --exact-match Foo-1.23.tar.gz Bar-2.34.tar.gz --detail  ;# show detail for several rels
 % lcpan rels --author PERLANCAR                ;# rels from certain authors only

B<Listing contents (files inside release archives):>

 % lcpan contents                               ;# WARNING: LOTS of output
 % lcpan contents <SOMEQUERY> ... --detail      ;# search, show detail
 % lcpan contents --dist File-Path              ;# list content of a single dist only

B<Listing scripts:>

 % lcpan scripts                                ;# WARNING: lots of output
 % lcpan scripts <SOMEQUERY> ... --detail       ;# search, show detail
 % lcpan scripts --dist App-PMUtils             ;# list scripts of a single dist only

B<Showing dependencies and reverse dependencies>:

 % lcpan deps Text::ANSITable    ;# which modules does Text::ANSITable depend on?
 % lcpan deps Text::ANSITable -R ;# recursive
 % lcpan deps Text::ANSITable -R --flatten ;# recursive & flatten result
 % lcpan deps Task::BeLike::CSSON --phase build
 % lcpan deps Text::ANSITable --phase ALL --rel ALL

 % lcpan rdeps Text::ANSITable ;# which dists depend on Text::ANSITable?

B<Showing mentions (references to modules/scripts from POD files within
releases)>:

 % lcpan mentions --mentioned-module Path::Tiny ;# who mentions Path::Tiny module?
 % lcpan mentions --mentioned-script mpath      ;# who mentions mpath script?

B<Some other utilities>:

 % lcpan mod2dist Text::ANSITable::ColorTheme::Default ;# -> Text-ANSITable

 % lcpan mod2rel  Text::ANSITable::ColorTheme::Default ;# -> Text-ANSITable-0.39.tar.gz
 % lcpan mod2rel  Text::ANSITable --full-path          ;# -> /cpan/authors/id/P/PE/PERLANCAR/Text-ANSITable-0.39.tar.gz

 % lcpan dist2rel Text-ANSITable             ;# -> Text-ANSITable-0.39.tar.gz
 % lcpan dist2rel Text-ANSITable --full-path ;# -> /cpan/authors/id/P/PE/PERLANCAR/Text-ANSITable-0.39.tar.gz

 % lcpan dist-mods Text-ANSITable ;# list modules in a distribution
 Text::ANSITable
 Text::ANSITable::BorderStyle::Default
 Text::ANSITable::ColorTheme::Default
 Text::ANSITable::StyleSet::AltRow

 % lcpan dist-scripts Text-ANSITable ;# list scripts in a distribution

 % lcpan author-mods PERLANCAR   ;# list an author's modules
 % lcpan author-dists PERLANCAR  ;# list an author's dists
 % lcpan author-rels PERLANCAR   ;# list an author's releases

 # who are authors with the most number of releases?
 % lcpan authors-by-rel-count

 # who are authors with the most number of distributions?
 % lcpan authors-by-dist-count

 # who are authors with the most number of registered modules/packages?
 % lcpan authors-by-mod-count

 # show all other authors' distributions using one of your modules
 % lcpan author-rdeps PERLANCAR --user-author-isnt PERLANCAR

 # show your old releases (which you should probably delete from CPAN?)
 % lcpan releases --author PERLANCAR --nolatest

 # what are modules that are used the most by other distributions?
 % lcpan mods-by-rdep-count

 # show POD documentation for module/.pod/script (works for uninstalled
 # modules/scripts since this works by extracting the POD from release tarballs
 # in the mirror)
 % lcpan doc Rinci            ;# looks for .pod, .pm, or script
 % lcpan doc Rinci.pod        ;# specifically looks for .pod
 % lcpan doc Rinci.pm         ;# specifically looks for .pm
 % lcpan doc plackup          ;# script
 % lcpan doc plackup -r       ;# dump the raw POD instead of rendering it

More subcommands are available. lcpan is plugin-based, see/install
C<App::lcpan::CmdBundle::*> modules for more subcommands.

=head2 Injecting additional modules to your local CPAN mirror

Sometimes, you only want to add one or a few modules to the local CPAN mirror.
For example, you are on a bad/expensive Internet connection and cannot afford a
full mirror update. Or, you have a module that is not indexed on CPAN but want
to add to your local mirror (creating a so-called DarkPAN based on an existing
mini CPAN mirror). To do that:

 % lcpan inject --author SOMEONE Foo-0.01.tar.gz Bar-Baz-2.34.tar.gz

where C<SOMEONE> is an author ID (does not need to already exist) that you
choose to put the modules under.

This will add the files to the local mirror as well as update the index.


=head1 DESCRIPTION

This application is a convenient bundling of C<CPAN::Mini> and an indexer so in
addition to creating your local CPAN mirror and installing modules from it, you
can also query various things about your local CPAN mirror quickly from the
command-line (as well as programmatically). Powerful and more convenient
querying is the main reason C<lcpan> is created.


=head1 MORE EXAMPLE QUERIES AND COMMANDS FOR CPAN USERS

=head2 Show how many dists will need to be installed if I install this module

TODO

=head2 Install all modules from a certain CPAN author

 % lcpan author-mods PERLANCAR | cpanm -n

or (if you want to install from local CPAN mirror):

 % lcpan author-mods PERLANCAR | lcpanm -n

or (specify release files directly):

 % lcpan author-rels --latest PERLANCAR | cpanm -n

=head2 Update all modules on your system, from local CPAN mirror

 % cpan-outdated --mirror file:$HOME/cpan | lcpanm -n


=head1 MORE EXAMPLE QUERIES AND COMMANDS FOR CPAN AUTHORS

=head2 Count your CPAN modules, dists, and releases

 % lcpan author-mods  PERLANCAR | wc -l
 % lcpan author-dists PERLANCAR | wc -l
 % lcpan author-rels  PERLANCAR | wc -l

=head2 More complex queries

For more complex queries, you can always access the SQLite database directly.
See L<App::lcpan> for the database schema.


=head1 FAQ

=head2 How to customize location of local CPAN mirror?

By default CPAN mirror is put in C<~/cpan>. To customize this, use the C<--cpan>
option, e.g.:

 % lcpan update --cpan /path/to/my/cpan

You can also create a configuration C<~/lcpan.conf> so you don't have to specify
the C<--cpan> option everytime:

 cpan=/path/to/my/cpan

=head2 Where is the SQLite database (the index) located?

By default at C<$cpan/index.db>. You can customize the name of the database
using the C<--index-name> command-line option or the Cindex_name> configuration,
e.g.:

 --index-name lcpan.db

which will create the database at C<$cpan/lcpan.db>. If you want to put the
database file somewhere else (e.g. outside the CPAN repository structure),
prepend a path (something that contains "/") to the index name, e.g. in
configuration:

 index_name = /home/ujang/lcpan.db

=head2 How do I see the SQL statements/queries being issued while running lcpan?

You can try using L<Log::ger::DBI::Query>, e.g.:

 % PERL5OPT=-MLog::ger::DBI::Query TRACE=1 lcpan ...

=head2 How do I reindex from scratch (without downloading the mirror)?

Run C<lcpan reset> (or delete C<index.db>) and run C<lcpan update
--noupdate-files> again.

=head2 Indexing error: Out of memory!

This could happen when there is a corrupt archive or an archive that is too big.
To see which file is the culprit, try running C<lcpan update --noupdate-files>
with C<--verbose> (or even C<--debug> or C<--trace>). Then, you can skip the
file by using C<-F> or adding this entry to your C<lcpan.conf>:

 [update]
 skip_index_files=The-Culprit-1.23.tar.gz

Add more of such lines if you want to skip more files.

=head2 How do I download the mirror without updating the indexing?

Run C<lcpan update --noupdate-index>.

=head2 How do I see how recent the mirror or the index is?

Use C<lcpan stats> or C<lcpan stats-last-index-time>.

=head2 Can I use lcpan with a DarkPAN?

Yes. You can use C<lcpan> to index any CPAN-like repository. This include a mini
CPAN mirror, a mini CPAN mirror with a few injected private modules, or a
repository created by L<OrePAN> (or similar tools).


=head1 SEE ALSO

L<CPAN::Mini>

L<cpan-outdated>

L<lcpanm>
